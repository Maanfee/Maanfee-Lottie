@namespace Maanfee.Lottie
@implements IAsyncDisposable
@inject LottieService Lottie

<style>

    .lottie-container {
        width: 100%;
        height: 300px;
        margin: 1rem 0;
        border: 1px solid #ddd;
        border-radius: 8px;
        background: #f9f9f9;
    }

</style>

<div @ref="containerElement" class="@Class"></div>

@code {

    [Parameter]
    public string Class { get; set; } = "lottie-container";

    [Parameter]
    public string AnimationUrl { get; set; } = "";

    [Parameter]
    public string AnimationJson { get; set; } = "";

    [Parameter]
    public bool AutoPlay { get; set; } = true;

    [Parameter]
    public bool Loop { get; set; } = true;

    [Parameter]
    public string Renderer { get; set; } = "svg";

    private ElementReference containerElement;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && (!string.IsNullOrEmpty(AnimationUrl) || !string.IsNullOrEmpty(AnimationJson)))
        {
            await InitializeAnimation();
        }
    }

    private async Task InitializeAnimation()
    {
        try
        {
            if (!string.IsNullOrEmpty(AnimationJson))
            {
                await Lottie.InitializeWithJsonAsync(containerElement, AnimationJson, Renderer, Loop, AutoPlay);
            }
            else if (!string.IsNullOrEmpty(AnimationUrl))
            {
                await Lottie.InitializeAsync(containerElement, AnimationUrl, Renderer, Loop, AutoPlay);
            }

            await OnLoaded.InvokeAsync();
        }
        catch (Exception ex)
        {
            await OnError.InvokeAsync(ex.Message);
        }
        finally
        {
            // IsLoading = false;
            StateHasChanged();
        }
    }

    #region Events

    [Parameter]
    public EventCallback OnLoaded { get; set; }

    [Parameter]
    public EventCallback<string> OnError { get; set; }

    #endregion

    // ********************************************

    public async ValueTask DisposeAsync()
    {
        await Lottie.DisposeAsync();
    }
}