@page "/"
@using Maanfee.Lottie;
@inject LottieService Lottie
@inject AnimationService AnimationService

<PageTitle>Lottie</PageTitle>

<style>

    .controls {
        margin: 1rem 0;
        text-align: center;
    }

        .controls button {
            margin: 0 0.5rem;
        }

    .dropdown-container {
        margin: 1rem 0;
        text-align: center;
    }

    .dropdown {
        padding: 0.5rem;
        border-radius: 4px;
        border: 1px solid #ccc;
        font-size: 1rem;
        width: 300px;
    }

</style>

<div class="dropdown-container">
    <select id="animationSelect" class="dropdown" @onchange="OnAnimationSelected">
        <option value="">Select File</option>
        @foreach (var item in AvailableAnimations)
        {
            <option value="@item.FullPath">@item.Name</option>
        }
    </select>
</div>

<MaanfeeLottie AnimationJson="@content" @key="SelectedAnimation.FullPath"
               OnLoaded="OnLottieLoaded" OnError="OnLottieError" />

<div class="controls">
    <button @onclick="Play" class="btn btn-primary">Play</button>
    <button @onclick="Pause" class="btn btn-warning">Pause</button>
    <button @onclick="RandomAnimation" class="btn btn-success">Random</button>
</div>

@str

@code {
    private string str;

    protected override async Task OnInitializedAsync()
    {
        AvailableAnimations = AnimationService.GetAvailableAnimations();
        await Task.Delay(100);
        await RandomAnimation();
    }

    private AnimationInfo SelectedAnimation = new();

    private List<AnimationInfo> AvailableAnimations = new();

    private string content = string.Empty;

    private async Task OnAnimationSelected(ChangeEventArgs e)
    {
        var fullPath = e.Value?.ToString();
        if (!string.IsNullOrEmpty(fullPath))
        {
            var selectedAnimation = AvailableAnimations.FirstOrDefault(a => a.FullPath == fullPath);
            if (selectedAnimation != null)
            {
                await LoadAnimation(selectedAnimation);
            }
        }
    }

    private async Task LoadAnimation(AnimationInfo animationInfo)
    {
        content = await AnimationService.GetAnimationContentAsync(animationInfo.Name);
        SelectedAnimation = animationInfo;
        StateHasChanged();
    }

    private void OnLottieLoaded()
    {
        str = ("Loading animation loaded!");
    }

    private void OnLottieError(string error)
    {
        str = ($"Error loading animation: {error}");
    }

    private async Task Play()
    {
        if (Lottie != null)
        {
            await Lottie.Play();
        }
    }

    private async Task Pause()
    {
        if (Lottie != null)
            await Lottie.Pause();
    }

    private Random random = new Random();

    private async Task RandomAnimation()
    {
        if (AvailableAnimations == null || !AvailableAnimations.Any())
            return;

        var availableOptions = AvailableAnimations
            .Where(anim => anim.Name != SelectedAnimation?.Name)
            .ToList();

        if (!availableOptions.Any())
            availableOptions = AvailableAnimations.ToList();

        var randomIndex = random.Next(availableOptions.Count);
        await LoadAnimation(availableOptions[randomIndex]);
    }

}